{{!< default}}
{{#post}}

<!-- Reading Progress Bar -->
<div id="reading-progress-container">
    <div id="reading-progress-bar"></div>
</div>

<main class="gh-main">

    <article class="gh-article {{post_class}}">
        <header class="gh-article-header gh-canvas">

            {{#if primary_tag}}
                <a class="gh-article-tag" href="{{primary_tag.url}}">{{primary_tag.name}}</a>
            {{/if}}
            <h1 class="gh-article-title is-title">{{title}}</h1>
            {{#if custom_excerpt}}
                <p class="gh-article-excerpt is-body">{{custom_excerpt}}</p>
            {{/if}}

            {{#if @custom.show_post_metadata}}
            <div class="gh-article-meta">
                <div class="gh-article-author-image instapaper_ignore">
                    {{#foreach authors}}
                        {{#if profile_image}}
                            <a href="{{url}}">
                                <img class="author-profile-image" src="{{img_url profile_image size="xs"}}" alt="{{name}}">
                            </a>
                        {{else}}
                            <a href="{{url}}">{{> "icons/avatar"}}</a>
                        {{/if}}
                    {{/foreach}}
                </div>
                <div class="gh-article-meta-wrapper">
                    <h4 class="gh-article-author-name">{{authors}}</h4>
                    <div class="gh-article-meta-content">
                        <time class="gh-article-meta-date" datetime="{{date format="YYYY-MM-DD"}}">{{date format="DD MMM YYYY"}}</time>
                        {{#if reading_time}}
                            <span class="gh-article-meta-length"><span class="bull">—</span> {{reading_time}}</span>
                        {{/if}}
                    </div>
                </div>
            </div>
            {{/if}}

            {{> "feature-image"}}

        </header>

        <section class="gh-content gh-canvas is-body{{#if @custom.enable_drop_caps_on_posts}} drop-cap{{/if}}">
            {{content}}
        </section>

        <!-- TOC Toggle Button -->
        <div id="toc-toggle" class="toc-toggle">→</div>

        <!-- Floating TOC Sidebar -->
        <aside id="toc" class="toc-container">
            <div class="toc-header">On This Article</div>
            <nav class="toc-content"></nav>
        </aside>

        {{#if comments}}
            <div class="gh-comments gh-canvas">
                {{comments}}
            </div>
        {{/if}}

    </article>

</main>

{{/post}}

{{#if @custom.show_related_articles}}
    {{#get "posts" include="authors" filter="id:-{{post.id}}" limit="4" as |next|}}
        {{#if next}}
            <section class="gh-container is-grid gh-outer">
                <div class="gh-container-inner gh-inner">
                    <h2 class="gh-container-title">Read more</h2>
                    <div class="gh-feed">
                        {{#foreach next}}
                            {{> "post-card" lazyLoad=true}}
                        {{/foreach}}
                    </div>
                </div>
            </section>
        {{/if}}
    {{/get}}
{{/if}}

<style>
/* Reading Progress Bar */
#reading-progress-container {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 6px;
    background: rgba(0,0,0,0.08);
    z-index: 10000;
}
#reading-progress-bar {
    width: 0%;
    height: 100%;
    background-color: #1155CC;
    transition: width 0.2s ease;
}

/* TOC Sidebar */
.toc-container {
    position: fixed;
    top: 50%;
    left: -260px;
    transform: translateY(-50%);
    width: 240px;
    max-height: 80vh;
    overflow-y: auto;
    background: linear-gradient(135deg, rgba(255,255,255,0.08), rgba(255,255,255,0.04));
    backdrop-filter: blur(24px) saturate(180%);
    -webkit-backdrop-filter: blur(24px) saturate(180%);
    border-radius: 12px;
    border: 1px solid rgba(255,255,255,0.2);
    padding: 16px;
    font-size: 0.85em;
    color: inherit;
    font-family: var(--font-body, inherit);
    z-index: 9999;
    opacity: 0;
    pointer-events: none;
    transition: all 0.4s ease;
    box-shadow: 0 8px 28px rgba(0,0,0,0.15);
}
.toc-container.show {
    opacity: 1;
    pointer-events: auto;
    left: 20px;
}
.toc-header {
    font-weight: bold;
    font-size: 0.95em;
    margin-bottom: 10px;
}
.toc-content ul {
    list-style: none;
    padding: 0;
    margin: 0;
}
.toc-content li {
    margin: 6px 0;
}
.toc-content li.toc-h3 {
    margin-left: 16px;
    font-size: 0.8em;
}
.toc-content a {
    text-decoration: none;
    color: inherit;
    transition: color 0.2s;
}
.toc-content a:hover {
    color: #1155CC;
}
.toc-content a.active {
    font-weight: bold;
    color: #1155CC;
}

/* Toggle Button */
#toc-toggle {
    position: fixed;
    top: 50%;
    left: 0;
    transform: translateY(-50%);
    width: 26px;
    height: 46px;
    background: rgba(255,255,255,0.12);
    backdrop-filter: blur(14px) saturate(180%);
    -webkit-backdrop-filter: blur(14px) saturate(180%);
    border-radius: 0 8px 8px 0;
    border: 1px solid rgba(255,255,255,0.25);
    display: flex;
    align-items: center;
    justify-content: center;
    font-weight: bold;
    font-size: 1.1em;
    cursor: pointer;
    z-index: 10001;
    box-shadow: 2px 4px 12px rgba(0,0,0,0.2);
    transition: background 0.2s;
}
#toc-toggle:hover {
    background: rgba(255,255,255,0.25);
}

/* Mobile */
@media (max-width: 768px) {
    .toc-container {
        width: 85vw;
        left: -90vw;
    }
    .toc-container.show {
        left: 5vw;
    }
    .toc-content li.toc-h3 {
        display: block;
    }
    #toc-toggle {
        width: 32px;
        height: 40px;
    }
}
</style>

<script>
document.addEventListener("DOMContentLoaded", () => {
    const toc = document.getElementById("toc");
    const toggleBtn = document.getElementById("toc-toggle");
    const content = document.querySelector(".gh-content");
    const article = document.querySelector(".gh-article");
    const footer = document.querySelector("footer"); // include footer in progress
    const progressBar = document.getElementById("reading-progress-bar");
    if (!toc || !toggleBtn || !content || !progressBar || !article) return;

    // Generate TOC
    const headings = content.querySelectorAll("h2, h3");
    if (headings.length) {
        let tocHTML = "<ul>";
        let h2Index = -1;
        headings.forEach((h, i) => {
            const id = h.id || `heading-${i}`;
            h.id = id;
            if (h.tagName === "H2") {
                h2Index++;
                tocHTML += `<li class="toc-item toc-h2" data-index="${h2Index}"><a href="#${id}">${h.textContent}</a></li>`;
            } else if (h.tagName === "H3") {
                tocHTML += `<li class="toc-item toc-h3" data-parent="${h2Index}"><a href="#${id}">${h.textContent}</a></li>`;
            }
        });
        tocHTML += "</ul>";
        toc.querySelector(".toc-content").innerHTML = tocHTML;

        // Slower smooth scroll (~2.5s, elegant easing)
        toc.querySelectorAll("a").forEach(a => {
            a.addEventListener("click", e => {
                e.preventDefault();
                const target = document.getElementById(a.getAttribute("href").substring(1));
                if (!target) return;

                const start = window.scrollY;
                const end = target.getBoundingClientRect().top + window.scrollY - 70;
                const duration = 2500; // 2.5 seconds
                const startTime = performance.now();

                function animateScroll(currentTime) {
                    const elapsed = currentTime - startTime;
                    const progress = Math.min(elapsed / duration, 1);
                    const ease = 1 - Math.pow(1 - progress, 3); // easeOutCubic
                    window.scrollTo(0, start + (end - start) * ease);
                    if (elapsed < duration) requestAnimationFrame(animateScroll);
                }
                requestAnimationFrame(animateScroll);

                setTimeout(() => {
                    toc.classList.remove("show");
                    toggleBtn.textContent = "→";
                }, 2600);
            });
        });

        // Highlight active section
        const observer = new IntersectionObserver(entries => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    toc.querySelectorAll("a").forEach(a => a.classList.remove("active"));
                    const link = toc.querySelector(`a[href="#${entry.target.id}"]`);
                    if (link) link.classList.add("active");
                }
            });
        }, { rootMargin: "-40% 0px -40% 0px" });
        headings.forEach(h => observer.observe(h));
    }

    // Toggle button
    let visible = false;
    toggleBtn.addEventListener("click", () => {
        visible = !visible;
        toc.classList.toggle("show", visible);
        toggleBtn.textContent = visible ? "←" : "→";
    });

    // Reading Progress Bar (includes footer)
    function updateProgress() {
        const scrollTop = window.scrollY || document.documentElement.scrollTop;
        const articleTop = article.offsetTop;
        const footerHeight = footer ? footer.offsetHeight : 0;
        const articleBottom = article.offsetTop + article.offsetHeight + footerHeight;
        const windowHeight = window.innerHeight;

        if (scrollTop < articleTop) {
            progressBar.style.width = "0%";
            return;
        }

        const distance = articleBottom - articleTop - windowHeight;
        const progress = Math.min(((scrollTop - articleTop) / distance) * 100, 100);
        progressBar.style.width = progress + "%";
    }

    window.addEventListener("scroll", updateProgress);
    window.addEventListener("resize", updateProgress);
    updateProgress();
});
</script>
